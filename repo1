{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO3CcZ+Ma7oUuwfncZYTcSC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/LAILANSONAR/My-website-/blob/main/repo1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1EQY4KxhVrBi",
        "outputId": "e6276391-b8a1-4aa3-e907-a163908b556e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "position at 1 sec : 1\n",
            "position at 2 sec :  4\n",
            "estimated speed (slope) :  3.0\n"
          ]
        }
      ],
      "source": [
        "def f(x):\n",
        "  return x **2\n",
        "x1 = 1\n",
        "x2 = 2\n",
        "y1 = f(x1)\n",
        "y2 =f(x2)\n",
        "slope = (y2 - y1) / (x2 - x1)\n",
        "print(\"position at 1 sec :\" , y1)\n",
        "print(\"position at 2 sec : \", y2)\n",
        "print(\"estimated speed (slope) : \", slope)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def f(x):\n",
        "  return x **2\n",
        "x1 = 2\n",
        "x2 = x1 + 0.1\n",
        "change_in_y = f(x2) -f(x1)\n",
        "change_in_x = x2 -x1\n",
        "slope = change_in_y / change_in_x\n",
        "print(\"change in x : \" , change_in_x)\n",
        "print(\"change_in_y : \",change_in_y)\n",
        "print(\"estimated chnage in(slope) : \" , slope)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KkIcRMIMXo3y",
        "outputId": "55fb8b35-8890-44dd-d408-3edabc16015b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "change in x :  0.10000000000000009\n",
            "change_in_y :  0.41000000000000014\n",
            "estimated chnage in(slope) :  4.099999999999998\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def f(x):\n",
        "  return x**2\n",
        "x = 2\n",
        "for h in [1,0.1,0.01,0.001,0.0001]:\n",
        "  slope = (f(x+h)-f(x))/h\n",
        "  print(f\"when h = {h}, the estimated derivative si : {slope}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7Yw1DZJ1ZSdY",
        "outputId": "adf15805-e34a-43fd-8b9b-e43bb04c57f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "when h = 1, the estimated derivative si : 5.0\n",
            "when h = 0.1, the estimated derivative si : 4.100000000000001\n",
            "when h = 0.01, the estimated derivative si : 4.009999999999891\n",
            "when h = 0.001, the estimated derivative si : 4.000999999999699\n",
            "when h = 0.0001, the estimated derivative si : 4.0001000000078335\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def f(x):\n",
        "  return x**3\n",
        "x = 1\n",
        "for h in [1,0.1,0.001,0.0001]:\n",
        "  slope = f(x +h) - f(x) / h\n",
        "  print(f\"h = {h}, estimating derivative x=1 ;, {slope}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Lv0O9InOa088",
        "outputId": "002c457b-6935-4d19-bbea-aa93e122f0f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "h = 1, estimating derivative x=1 ;, 7.0\n",
            "h = 0.1, estimating derivative x=1 ;, -8.669\n",
            "h = 0.001, estimating derivative x=1 ;, -998.996996999\n",
            "h = 0.0001, estimating derivative x=1 ;, -9998.99969997\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def f(x):\n",
        "  return x **2*2*x\n",
        "x = 3\n",
        "for h in [1,0.1,0.01,0.001,0.0001]:\n",
        "  slope =( f(x+h)-f(x)) /h\n",
        "  print(f\"h = {h} , estimative x = 3: {slope}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dmQmUqozbnUc",
        "outputId": "60167897-5a96-4cdd-92b9-b12fe422d4ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "h = 1 , estimative x = 3: 74.0\n",
            "h = 0.1 , estimative x = 3: 55.82000000000008\n",
            "h = 0.01 , estimative x = 3: 54.18019999999899\n",
            "h = 0.001 , estimative x = 3: 54.01800199999229\n",
            "h = 0.0001 , estimative x = 3: 54.00180002013144\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def f(x):\n",
        "  return x**2 + 5**x +6\n",
        "x = 2\n",
        "for h in [1,2,3,4,5]:\n",
        "   slope = (f(x+h) +f(x)) /h\n",
        "   print(f\"h = {h}, estimating slope : {slope}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S9xH8sQBcgvl",
        "outputId": "687cfedb-511b-4a78-f550-e9a0361485f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "h = 1, estimating slope : 175.0\n",
            "h = 2, estimating slope : 341.0\n",
            "h = 3, estimating slope : 1063.6666666666667\n",
            "h = 4, estimating slope : 3925.5\n",
            "h = 5, estimating slope : 15643.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def f(x):\n",
        "  return x**2 + 5*x +6\n",
        "x = 2\n",
        "for h in [1,0.1,0.01,0.001]:\n",
        "  slope = (f(x+h)+ f(x))/ h\n",
        "print(f\" h = {h} , estimating slope : {slope}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k4fw0zxXd286",
        "outputId": "505f7970-0351-479c-c322-36831b3b9e2a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " h = 0.001 , estimating slope : 40009.001\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "y = x**2\n",
        "plt.plot(x,y)\n",
        "plt.title(\"my graph\")\n",
        "plt.xlabel(\"x\")\n",
        "plt.ylabel(\"y\")\n",
        "plt.grid(\"True\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "P_W_XPb8fNsL",
        "outputId": "d9a681c6-d26c-40a5-a0d8-96e439a8a76a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.arrow(0,0,3,2 ,head_width = 0.2,\n",
        "head_length = 0.3,color = 'black')\n",
        "plt.xlim(-1,3)\n",
        "plt.ylim(-1,5)\n",
        "plt.grid('True')\n",
        "plt.ylabel(\"y\")\n",
        "plt.xlabel(\"x\")\n",
        "plt.title(\"my graph\")\n",
        "plt.axhline(0,color = 'blue')\n",
        "plt.axvline(0,color = 'blue')\n",
        "plt.gca().set_aspect('equal')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "SrZ5WMD9jtVy",
        "outputId": "143c8851-3da2-4fbd-f720-cd1051b4cca6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "start_x,start_y = 1,1\n",
        "vector_x = 4 -start_x\n",
        "vector_y = 3 -start_y\n",
        "plt.arrow(start_x,start_y,vector_x,vector_y,head_width =0.2,head_length = 0.3,color = 'green')\n",
        "plt.xlim(0,6)\n",
        "plt.ylim(0,6)\n",
        "plt.grid(True)\n",
        "plt.xlabel(\"x\")\n",
        "plt.ylabel(\"y\")\n",
        "plt.title(\"my vector(1,1) tpo (4,3)\")\n",
        "plt.axhline(0, color = 'black')\n",
        "plt.axvline(0, color = 'black')\n",
        "plt.gca().set_aspect(\"equal\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "nCIM8CUtIKKK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "368aa9e5-355f-4df6-c7c7-f6c39a3569a5"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "star_x,start_y =1,3\n",
        "vector_x = 8 - start_x\n",
        "vector_y = 8 -start_y\n",
        "plt.arrow(start_x,start_y,vector_x,vector_y,head_width= 0.2,head_length= 0.3,color = \"orange\")\n",
        "plt.xlim(0,10)\n",
        "plt.ylim(0,10)\n",
        "plt.grid(True)\n",
        "plt.xlabel(\"x\")\n",
        "plt.ylabel(\"y\")\n",
        "plt.title(\"my vector{1,3} to (8,8)\")\n",
        "plt.axhline(0,color = \"green\")\n",
        "plt.axvline(0,color = \"green\")\n",
        "plt.gca().set_aspect(\"equal\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "Z1b4P2aRLMbU",
        "outputId": "ad69df28-6f2a-4cd3-b03e-45fb525ffd76"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a_x,a_y = 3,2\n",
        "b_x,b_y=1,2\n",
        "dot_product = a_x*b_x + a_y*b_y\n",
        "print(\"dot product of aA[1] and b: \", dot_product)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1HiMylMBOGsv",
        "outputId": "1184b29e-8fe8-4245-f4e0-b1af538653d6"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dot product of a and b:  7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "A = (3,2)\n",
        "B = (1,2)\n",
        "dot = A[0]*B[0]+A[1]*B[1]\n",
        "mag_A =math.sqrt(A[0]**2 + A[1]**2)\n",
        "mag_B = math.sqrt(B[0]**2 + B[1]**2)\n",
        "cos_theta = dot /(mag_A*mag_B)\n",
        "theta_rad = math.acos(cos_theta)\n",
        "theta_deg = math.degrees(theta_rad)\n",
        "print('angle between A and B ',round(theta_deg,2),\"degrees\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xr754TTwPKF_",
        "outputId": "1d97266a-f2e1-4f26-e3ac-fc13bcca6cfe"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "angle between A and B  29.74 degrees\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "vx,vy = 3,4\n",
        "speed = math.sqrt(vx**2 + vy**2)\n",
        "print(\"speed = \", speed)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QELVXqFpROtl",
        "outputId": "34b0eeae-0646-4c6f-c2ab-e35f2289d5b7"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "speed =  5.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "A = np.array([[1,2],[3,4]])\n",
        "B = np.array([[5,6],[7,8]])\n",
        "c = A + B\n",
        "print(\"matrices\", A)\n",
        "print(\"matrices\", B)\n",
        "print(\"matrices\",c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EXXlJpJzSAiw",
        "outputId": "5f059e9a-17d2-479a-dbe4-521357e4a402"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "matrices [[1 2]\n",
            " [3 4]]\n",
            "matrices [[5 6]\n",
            " [7 8]]\n",
            "matrices [[ 6  8]\n",
            " [10 12]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "A= np.array([[5,6],[7,8]])\n",
        "B= np.array([[1,2],[3,4]])\n",
        "c =np.dot(A,B)\n",
        "print(\"subtratiobn\",c)\n",
        "print(\"subtratiobn\",A)\n",
        "print(\"subtratiobn\",B)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JvZbj3YrTBrv",
        "outputId": "38b5adc5-2889-4159-921c-1cbc0c54be7b"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "subtratiobn [[23 34]\n",
            " [31 46]]\n",
            "subtratiobn [[5 6]\n",
            " [7 8]]\n",
            "subtratiobn [[1 2]\n",
            " [3 4]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "A =  np.array([[2,3],[3,4]])\n",
        "B =np.array([8,11])\n",
        "x = np.linalg.solve(A,B)\n",
        "print(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5KH3jSR7UE2L",
        "outputId": "3baa599d-6064-45b3-c441-09f39df8d567"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1. 2.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "M = np.array([\n",
        "    [0,0,255,0,0],\n",
        "    [0,255,255,255,0],\n",
        "    [255,255,255,255,255],\n",
        "    [0,255,255,255,0],\n",
        "    [0,0,255,0,0]\n",
        "    ])\n",
        "plt.imshow(M,cmap = 'grey')\n",
        "plt.title(\"matrix as image\")\n",
        "plt.colorbar()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "PKFs8F4DU-Sv",
        "outputId": "1dcdd0b5-b408-4534-cf72-ac9f223a714b"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "M = np.array([\n",
        "    [0,0,1,0,0],\n",
        "    [0,1,1,1,0],\n",
        "    [1,1,1,1,1],\n",
        "    [0,1,1,1,0],\n",
        "    [0,0,1,0,0],\n",
        "    ])\n",
        "plt.imshow(M,cmap = 'grey')\n",
        "plt.title(\"matrix as image\")\n",
        "plt.colorbar()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "vFHjyOWtdTaj",
        "outputId": "65497140-4860-4c8a-940a-3133482ae652"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "D0qA37S0dxyq"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}